package com.bonade.xxp.xqc_android_im.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bonade.xxp.xqc_android_im.DB.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UserInfo".
*/
public class UserDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "UserInfo";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cid = new Property(0, Long.class, "cid", true, "CID");
        public final static Property PeerId = new Property(1, int.class, "peerId", false, "PEER_ID");
        public final static Property Gender = new Property(2, Integer.class, "gender", false, "GENDER");
        public final static Property MainName = new Property(3, String.class, "mainName", false, "MAIN_NAME");
        public final static Property PinyinName = new Property(4, String.class, "pinyinName", false, "PINYIN_NAME");
        public final static Property RealName = new Property(5, String.class, "realName", false, "REAL_NAME");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property DepartmentId = new Property(9, Integer.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property Status = new Property(10, Integer.class, "status", false, "STATUS");
        public final static Property IsFriend = new Property(11, Integer.class, "isFriend", false, "IS_FRIEND");
        public final static Property Area = new Property(12, String.class, "area", false, "AREA");
        public final static Property Momentcover = new Property(13, String.class, "momentcover", false, "MOMENTCOVER");
        public final static Property Created = new Property(14, Integer.class, "created", false, "CREATED");
        public final static Property Updated = new Property(15, Integer.class, "updated", false, "UPDATED");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UserInfo\" (" + //
                "\"CID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cid
                "\"PEER_ID\" INTEGER NOT NULL UNIQUE ," + // 1: peerId
                "\"GENDER\" INTEGER," + // 2: gender
                "\"MAIN_NAME\" TEXT NOT NULL ," + // 3: mainName
                "\"PINYIN_NAME\" TEXT NOT NULL ," + // 4: pinyinName
                "\"REAL_NAME\" TEXT NOT NULL ," + // 5: realName
                "\"AVATAR\" TEXT NOT NULL ," + // 6: avatar
                "\"PHONE\" TEXT NOT NULL ," + // 7: phone
                "\"EMAIL\" TEXT NOT NULL ," + // 8: email
                "\"DEPARTMENT_ID\" INTEGER," + // 9: departmentId
                "\"STATUS\" INTEGER," + // 10: status
                "\"IS_FRIEND\" INTEGER," + // 11: isFriend
                "\"AREA\" TEXT," + // 12: area
                "\"MOMENTCOVER\" TEXT," + // 13: momentcover
                "\"CREATED\" INTEGER," + // 14: created
                "\"UPDATED\" INTEGER);"); // 15: updated
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_UserInfo_PEER_ID ON \"UserInfo\"" +
                " (\"PEER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UserInfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(1, cid);
        }
        stmt.bindLong(2, entity.getPeerId());
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(3, gender);
        }
        stmt.bindString(4, entity.getMainName());
        stmt.bindString(5, entity.getPinyinName());
        stmt.bindString(6, entity.getRealName());
        stmt.bindString(7, entity.getAvatar());
        stmt.bindString(8, entity.getPhone());
        stmt.bindString(9, entity.getEmail());
 
        Integer departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(10, departmentId);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(11, status);
        }
 
        Integer isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindLong(12, isFriend);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(13, area);
        }
 
        String momentcover = entity.getMomentcover();
        if (momentcover != null) {
            stmt.bindString(14, momentcover);
        }
 
        Integer created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(15, created);
        }
 
        Integer updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(16, updated);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(1, cid);
        }
        stmt.bindLong(2, entity.getPeerId());
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(3, gender);
        }
        stmt.bindString(4, entity.getMainName());
        stmt.bindString(5, entity.getPinyinName());
        stmt.bindString(6, entity.getRealName());
        stmt.bindString(7, entity.getAvatar());
        stmt.bindString(8, entity.getPhone());
        stmt.bindString(9, entity.getEmail());
 
        Integer departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(10, departmentId);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(11, status);
        }
 
        Integer isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindLong(12, isFriend);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(13, area);
        }
 
        String momentcover = entity.getMomentcover();
        if (momentcover != null) {
            stmt.bindString(14, momentcover);
        }
 
        Integer created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(15, created);
        }
 
        Integer updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(16, updated);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cid
            cursor.getInt(offset + 1), // peerId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // gender
            cursor.getString(offset + 3), // mainName
            cursor.getString(offset + 4), // pinyinName
            cursor.getString(offset + 5), // realName
            cursor.getString(offset + 6), // avatar
            cursor.getString(offset + 7), // phone
            cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // departmentId
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // isFriend
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // area
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // momentcover
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // created
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15) // updated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setCid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPeerId(cursor.getInt(offset + 1));
        entity.setGender(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMainName(cursor.getString(offset + 3));
        entity.setPinyinName(cursor.getString(offset + 4));
        entity.setRealName(cursor.getString(offset + 5));
        entity.setAvatar(cursor.getString(offset + 6));
        entity.setPhone(cursor.getString(offset + 7));
        entity.setEmail(cursor.getString(offset + 8));
        entity.setDepartmentId(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsFriend(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setArea(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMomentcover(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreated(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setUpdated(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setCid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getCid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getCid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
